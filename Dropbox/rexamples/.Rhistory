a<-available.packages()
head(rownames(a),3)
head(rownames(a),30)
clc
clear
clear
install.packages("slidify")
source("http://bioconductor.org/biocLite.R")
biocLite()
View(a)
View(a)
install.packages("statnet")
library(statnet)
help.start()
library(network)
data(package="network")
data(flo)
?flo
flo
list.files()
￼relations <- read.csv("relationalData.csv",header=FALSE,stringsAsFactors=FALSE)relations
￼relations <- read.csv("relationalData.csv",header=FALSE,stringsAsFactors=FALSE)
￼relations <- read.csv("relationalData.csv",header=FALSE,stringsAsFactors=FALSE)
g<-network.initialize(5)
g[1,2]<-1
g[2,]<-1
g
m<-matrix(0,nrow=5,ncol=5)
m[3,4:5]<-1
g[m>0]<-1
g
cd ./Dropbox
ls
cd ./Dropbox
vector()
vector(2,1)
vector([1,1],1)
vector((1,1))
vector(1,1)
vector(1)
vector(1)
clc
x <- [1,1]
x <- (1,1)
x <- (11)
x <- (1 1)
x <- (1 ;1)
x <- ((1,1)
x <- ((1,1))
x <- 0:3
x
x <- c(1,2)
x
x <- r(1,2)
x <- c(1,2)''
x<-c(1.7,"a")
x
x<-c("a",TRUE)
x
x<-c(TRUE,"a")
x
x<-c(TRUE,0)
x
x<-"a"
class(x)
as.character(x)
m<-matrix(1:8,nrow=2,ncol=4)
m
dim(m)<-c(4,2)
m
cbind(1:3)
rbind(2*(1:3)
)
factor(c("male","female","male","male","female"),levels=c("male","female"))
factor(c("male","female","male","male","female"),levels=c("female","male"))
install.packages(network)
library("ergm", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("lattice", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("manipulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("mvtnorm", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("rstudio", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("cluster", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
y<-data.frame(x=1,y="z")
dput(y)
dput(y,file="y.R")#save R code
dget(y)
new.y<-fget("y.R")
new.y<-dget("y.R")
new.y
clear
x<-c(1,3,5)
y<-(3,2,10)
y<-c(3,2,10)
cbind(x,y)
x<-1:4
y<-2:3
x+y
cd ./Dropbox/rexamples
cd ..
ls
pwd
read.csv("hw1_data.csv")
read.csv("hw1_data")
read.csv(hw1_data.csv)
pwd
cd ./rexamples
getwd
setwd R
columnmean<-function(y,removeNA=TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i],na.rm=removeNA)
}
means
}
means
columnmean
y<-1:20
columnmean
means
columnmean<-function(y,removeNA=TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i],na.rm=removeNA)
}
means
}
means
function(y,removeNA=TRUE)
function(y,removeNA=TRUE)clc
columnmean(1:20)
columnmean(c(1:20)
)
columnmean(c(1:20))
columnmean(airquality
)
columnmean(airquality)
make.power<-function(n){}
make.power<-function(n){ pow<-function(x){x^n}
pow}
cube<-make.power(3)
square<-make.power(2)
cube(3)
square(3)
ls(environment(cube))
get("n",environment(cube))
y<-10
f<-function(x){y<-2 y^2+g^x}
f<-function(x){y<-2 y^2+g^x}
x<-as.Date("2014-06-09")
x
unclass(x)
x<-Sys.time(0)
x<-Sys.time()
x
p<-as.POSIXlt(x)
names(unclass(p))
p$sec
p$min
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<10
z<-10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
source("functionexample.R")
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV file
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
source("pollutantmean.R")
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
directory<-read.csv(file="specdata",head=TRUE,sep=",")
directory<-read.csv(file="specdata/1.csv",head=TRUE,sep=",")
directory<-read.csv(file="specdata.csv",head=TRUE,sep=",")
cd ./specdata
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
soure("pollutantmean.R")
source("pollutantmean.R")
source("pollutantmean.R")
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
source("pollutantmean.R")
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
clc
c}
h<-read.csb(file="1.csv",head=TRUE,sep=",")
h<-read.csv(file="1.csv",head=TRUE,sep=",")
h<-read.csv(file="001.csv",head=TRUE,sep=",")
h<-read.csv(file="specdata/001.csv",head=TRUE,sep=",")
h<-read.csv(file="/specdata/001.csv",head=TRUE,sep=",")
h<-read.csv(file="*/specdata/001.csv",head=TRUE,sep=",")
h<-read.csv(file="*/*/specdata/001.csv",head=TRUE,sep=",")
h<-read.csv(file="/specdata/001.csv",head=TRUE,sep=",")
h<-read.csv(file="/specdata/001.csv",head=TRUE,sep=",")
path<-file.path(specdata,"001.csv")
h<-read.csv(file="specdata:/001.csv",head=TRUE,sep=",")
filename <- list.files(pattern="specdata/.csv")
data<-read.csv(paste(directory,"/",id,".csv",sep=""))
data<-read.csv(paste(directory,"/",id,".csv",sep=""))
file.names <- list.files(pattern="specdata/.csv")
data<-read.csv(file.name,"/",id,".csv",sep="")
data<-read.csv(file.names,"/",id,".csv",sep="")
data<-read.csv(file.names,id,".csv",sep="")
data<-read.csv(file.names,sep="")
data<-read.csv(file.names,sep="")
data<-read.csv(file.names,'/',id,".csv",header=TRUE,sep="")
data<-read.csv(file="file.names,'/',id,.csv",header=TRUE,sep="")
data<-read.csv(file="file.names/1.csv",header=TRUE,sep="")
directory<-specdata
directory<-"specdata"
file.names <- list.files(pattern="directory/.csv")
file.names <- list.files(pattern="directory/.csv")
str(lapply)
library(datasets)
data(iris)
?iris
mean(Sepal.Length)
library(datasets)
?iris
data(iris)
colMeans=apply(iris,1,mean)
warnings()
colMeans=apply(iris[,100:150],1,mean)
colMeans=apply(iris[100:150,],1,mean)
colMeans=apply(iris[,1:50],3,mean)
colMeans=apply(iris,3,mean)
colMeans=apply(iris,1,mean)
colMeans=apply(iris,2,mean)
colMeans=apply(iris[1:50,1],1,mean)
colMeans=apply(iris[1,1:50],1,mean)
colMeans=apply(iris[,1:50],1,mean)
colMeans=apply(iris[,3],1,mean)
iris$Sepal.Length
mean(iris$Sepal.Length[100:150])
colMeans(iris)
apply(iris[,1:4],2,mean)
apply(iris,1,mean)
data(mtcars)
?mtcars
apply(iris[,3],2,mean)
apply(iris[,1:4],2,mean)
mean(iris$Sepal.Length[100:150])
mean(iris$Species="virginica",]$Sepal.Length)
mean(iris[iris$Species="virginica",]$Sepal.Length)
mean(iris[iris$Species=="virginica",]$Sepal.Length)
tapply(mtcars$mpg, mtcars$cyl, mean)
debug(ls)
ls
ls
directory="specdata"
lc
exit
return
quit
directory<-"specdata"
file.names <- list.files(pattern="directory/.csv")
file.names
#extract the file names and store as numeric for comparison
file.names = as.numeric(sub("\\.csv$","",fileList))
file.names <- as.numeric(sub("\\.csv$","",list.files(pattern="directory/.csv")
)
))
file.names = as.numeric(sub("\\.csv$","",list.files(pattern="directory/.csv")
clc
Listfile <- list.files(pattern="directory/.csv")
all.files.data = lapply(Listfile,read.csv,header=TRUE)
all.files.data
directory<-"specdata"
Listfile <- list.files(pattern="directory/.csv")
all.files.data = lapply(Listfile,read.csv,header=TRUE)
Listfile <- list.files(pattern="specdata/.csv")
Listfile
path = "/specdata"
fileList = list.files(path=path,pattern="\\.csv$",full.names=T)
Listfile <- list.files(pattern="directory/.csv")
all.files.data = lapply(Listfile,read.csv,header=TRUE)
DATA = do.call("rbind",all.files.data)
DATA
summary(DATA)
clc
help(getwd())
?getwd
?paste
file.names <- list.files(pattern="specdata/.csv")
file.names <- list.files(pattern="~/Drobox/rexamples/specdata/.csv")
file.names <- list.files(pattern="~/Dropbox/rexamples/specdata/.csv")
~/Dropbox/rexamples/specdata
install.packages("RMySQL")
exit
quit
quit()
install.packages("Rmysql")
install.packages("RmySQL")
install.packages("RMySQL")
install.packages("RMySQL")
ucscDb<-dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
ucscDb<-dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
library("RmySQL")
library("RMySQL")
install.packages("DBI")
install.packages("DBI")
ucscDb<-dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
library("DBI")
library("RMySQL")
ucscDb<-dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result<-dbGetQuery(ucscDb, "show databases;")
dbDisconnect(ucscDb)
result
hg19<-dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables<-dbListTables(hg19)
length(allTables)
allTables[1:5]
dblist Fields(hg19,"affyU133Plus2")
dbListFields(hg19,"affyU133Plus2")
dbDisconnect(ucscDb)
hg19<-dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
dblist Fields(hg19,"affyU133Plus2")
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"select count(*) from affU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library("hdf5\")
library("hdf5")
library("hdf5")
library("rhdf5")
created=h5createGroup("example.h5","foo")
created=h5createFile("example.h5")
created=h5createGroup("example.h5","foo")
created=h5createGroup("example.h5","baa")
created=h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
con=url("http://scholar.google.com/citations?user=5dKSI5EAAAAJ&hl=en&oi=ao")
htmlCode=readLines(con)
close(con)
htmlCode
library(XML)
url<- "http://scholar.google.com/citations?user=5dKSI5EAAAAJ&hl=en&oi=ao"
html<-htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html,"//title",xmlValue)
xpathSApply(html,"//td[@id="col-citedby']"',xmlValue)
xpathSApply(html,"//td[@id="col-citedby']",xmlValue)
xpathSApply(html,"//td[@id='col-citedby']",xmlValue)
library(httr)
hml2=GET(url)
content2=content(html2,as="text")
content2=content(hml2,as="text")
parsedHTML=htmlParse(content2,asText=TRUE)
xpathSApply(parsedHtml,"//title",xmlValue)
xpathSApply(parsedHTML,"//title",xmlValue)
pwd
getwd()
setwd("Users/Berk/Dropbox/rexamples")
setwd("Users/Berk/Dropbox")
setwd("/Users/Berk/Dropbox/rexamples")
myapp=oauth_all("https://api.github.com/users/hypatiad/repos")
myapp=oauth_app("https://api.github.com/users/hypatiad/repos")
myapp=oauth_app("https://api.github.com/users/hypatiad/repos",key="852e165ff5357b40838f",secret="e87db1c9b8f732c59d11eeead2e8023932bfc254
")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
url<-http://biostat.jhsph.edu/~jleek/contact.html
url<-"http://biostat.jhsph.edu/~jleek/contact.html"
doc<-xmlTreeParse(url,useInternal=TRUE)
