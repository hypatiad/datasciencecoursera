cd ./Dropbox
ls
cd ./Dropbox
vector()
vector(2,1)
vector([1,1],1)
vector((1,1))
vector(1,1)
vector(1)
vector(1)
clc
x <- [1,1]
x <- (1,1)
x <- (11)
x <- (1 1)
x <- (1 ;1)
x <- ((1,1)
x <- ((1,1))
x <- 0:3
x
x <- c(1,2)
x
x <- r(1,2)
x <- c(1,2)''
x<-c(1.7,"a")
x
x<-c("a",TRUE)
x
x<-c(TRUE,"a")
x
x<-c(TRUE,0)
x
x<-"a"
class(x)
as.character(x)
m<-matrix(1:8,nrow=2,ncol=4)
m
dim(m)<-c(4,2)
m
cbind(1:3)
rbind(2*(1:3)
)
factor(c("male","female","male","male","female"),levels=c("male","female"))
factor(c("male","female","male","male","female"),levels=c("female","male"))
install.packages(network)
library("ergm", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("lattice", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("manipulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("mvtnorm", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("rstudio", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("cluster", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
y<-data.frame(x=1,y="z")
dput(y)
dput(y,file="y.R")#save R code
dget(y)
new.y<-fget("y.R")
new.y<-dget("y.R")
new.y
clear
x<-c(1,3,5)
y<-(3,2,10)
y<-c(3,2,10)
cbind(x,y)
x<-1:4
y<-2:3
x+y
cd ./Dropbox/rexamples
cd ..
ls
pwd
read.csv("hw1_data.csv")
read.csv("hw1_data")
read.csv(hw1_data.csv)
pwd
cd ./rexamples
getwd
setwd R
columnmean<-function(y,removeNA=TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i],na.rm=removeNA)
}
means
}
means
columnmean
y<-1:20
columnmean
means
columnmean<-function(y,removeNA=TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i],na.rm=removeNA)
}
means
}
means
function(y,removeNA=TRUE)
function(y,removeNA=TRUE)clc
columnmean(1:20)
columnmean(c(1:20)
)
columnmean(c(1:20))
columnmean(airquality
)
columnmean(airquality)
make.power<-function(n){}
make.power<-function(n){ pow<-function(x){x^n}
pow}
cube<-make.power(3)
square<-make.power(2)
cube(3)
square(3)
ls(environment(cube))
get("n",environment(cube))
y<-10
f<-function(x){y<-2 y^2+g^x}
f<-function(x){y<-2 y^2+g^x}
x<-as.Date("2014-06-09")
x
unclass(x)
x<-Sys.time(0)
x<-Sys.time()
x
p<-as.POSIXlt(x)
names(unclass(p))
p$sec
p$min
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<10
z<-10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
source("functionexample.R")
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV file
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
source("pollutantmean.R")
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
directory<-read.csv(file="specdata",head=TRUE,sep=",")
directory<-read.csv(file="specdata/1.csv",head=TRUE,sep=",")
directory<-read.csv(file="specdata.csv",head=TRUE,sep=",")
cd ./specdata
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
soure("pollutantmean.R")
source("pollutantmean.R")
source("pollutantmean.R")
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
source("pollutantmean.R")
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
clc
c}
h<-read.csb(file="1.csv",head=TRUE,sep=",")
h<-read.csv(file="1.csv",head=TRUE,sep=",")
h<-read.csv(file="001.csv",head=TRUE,sep=",")
h<-read.csv(file="specdata/001.csv",head=TRUE,sep=",")
h<-read.csv(file="/specdata/001.csv",head=TRUE,sep=",")
h<-read.csv(file="*/specdata/001.csv",head=TRUE,sep=",")
h<-read.csv(file="*/*/specdata/001.csv",head=TRUE,sep=",")
h<-read.csv(file="/specdata/001.csv",head=TRUE,sep=",")
h<-read.csv(file="/specdata/001.csv",head=TRUE,sep=",")
path<-file.path(specdata,"001.csv")
h<-read.csv(file="specdata:/001.csv",head=TRUE,sep=",")
filename <- list.files(pattern="specdata/.csv")
data<-read.csv(paste(directory,"/",id,".csv",sep=""))
data<-read.csv(paste(directory,"/",id,".csv",sep=""))
file.names <- list.files(pattern="specdata/.csv")
data<-read.csv(file.name,"/",id,".csv",sep="")
data<-read.csv(file.names,"/",id,".csv",sep="")
data<-read.csv(file.names,id,".csv",sep="")
data<-read.csv(file.names,sep="")
data<-read.csv(file.names,sep="")
data<-read.csv(file.names,'/',id,".csv",header=TRUE,sep="")
data<-read.csv(file="file.names,'/',id,.csv",header=TRUE,sep="")
data<-read.csv(file="file.names/1.csv",header=TRUE,sep="")
directory<-specdata
directory<-"specdata"
file.names <- list.files(pattern="directory/.csv")
file.names <- list.files(pattern="directory/.csv")
str(lapply)
library(datasets)
data(iris)
?iris
mean(Sepal.Length)
library(datasets)
?iris
data(iris)
colMeans=apply(iris,1,mean)
warnings()
colMeans=apply(iris[,100:150],1,mean)
colMeans=apply(iris[100:150,],1,mean)
colMeans=apply(iris[,1:50],3,mean)
colMeans=apply(iris,3,mean)
colMeans=apply(iris,1,mean)
colMeans=apply(iris,2,mean)
colMeans=apply(iris[1:50,1],1,mean)
colMeans=apply(iris[1,1:50],1,mean)
colMeans=apply(iris[,1:50],1,mean)
colMeans=apply(iris[,3],1,mean)
iris$Sepal.Length
mean(iris$Sepal.Length[100:150])
colMeans(iris)
apply(iris[,1:4],2,mean)
apply(iris,1,mean)
data(mtcars)
?mtcars
apply(iris[,3],2,mean)
apply(iris[,1:4],2,mean)
mean(iris$Sepal.Length[100:150])
mean(iris$Species="virginica",]$Sepal.Length)
mean(iris[iris$Species="virginica",]$Sepal.Length)
mean(iris[iris$Species=="virginica",]$Sepal.Length)
tapply(mtcars$mpg, mtcars$cyl, mean)
debug(ls)
ls
ls
directory="specdata"
lc
exit
return
quit
directory<-"specdata"
file.names <- list.files(pattern="directory/.csv")
file.names
#extract the file names and store as numeric for comparison
file.names = as.numeric(sub("\\.csv$","",fileList))
file.names <- as.numeric(sub("\\.csv$","",list.files(pattern="directory/.csv")
)
))
file.names = as.numeric(sub("\\.csv$","",list.files(pattern="directory/.csv")
clc
Listfile <- list.files(pattern="directory/.csv")
all.files.data = lapply(Listfile,read.csv,header=TRUE)
all.files.data
directory<-"specdata"
Listfile <- list.files(pattern="directory/.csv")
all.files.data = lapply(Listfile,read.csv,header=TRUE)
Listfile <- list.files(pattern="specdata/.csv")
Listfile
path = "/specdata"
fileList = list.files(path=path,pattern="\\.csv$",full.names=T)
Listfile <- list.files(pattern="directory/.csv")
all.files.data = lapply(Listfile,read.csv,header=TRUE)
DATA = do.call("rbind",all.files.data)
DATA
summary(DATA)
clc
help(getwd())
?getwd
?paste
file.names <- list.files(pattern="specdata/.csv")
file.names <- list.files(pattern="~/Drobox/rexamples/specdata/.csv")
file.names <- list.files(pattern="~/Dropbox/rexamples/specdata/.csv")
~/Dropbox/rexamples/specdata
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
source("submitscript3.R")
source("submitscript3.R")
submit()
getwd()
setwd("/Users/Berk/Dropbox/rexamples/rprog-data-Assignment3-data")
setwd("/Users/Berk/Dropbox/rexamples/rprog-data-ProgAssignment3-data")
submit()
submit()
submit()
?num.index
source("rankhospital.R")
rankhospiral("TX","heart failure",4)
rankhospital("TX","heart failure",4)
source("rankhospital.R")
source("rankhospital.R")
rankhospital("TX","heart failure",4)
rankhospital("TX","heart attack","worst")
rankhospital("MD","heart attack","worst")
rankhospital("MN","heart attack","5000")
rankhospital("MN","heart attack","5000")
rankhospital("MN","heart attack","5000")
rankhospital("MD","heart attack","5000")
rankhospital("MD","heart attack","500")
rankhospital("MD","heart attack","50000")
rankhospital("MD","heart attack","worst")
source("rankhospital.R")
rankhospital("MD","heart attack","50000")
rankhospital("MD","heart attack","5000")
source("rankhospital.R")
h
source("rankhospital.R")
h
rankhospital("MD","heart attack","5000")
h
## Read outcome data
data<-read.csv("outcome-of-care-measures.csv",colClasses = "character")
statename<-data[,7]
## states without NAs
##duplicate elements removed by unique
statenew<-unique(statename[!is.na(statename)])
## order alphabetically
state.order <- statenew[sort.list(statenew)]
## Check that state and outcome are valid
outcomename <- list(outcome.Index=c("heart attack","heart failure","pneumonia"),
state=state.order,h.index=list(heart.attack=11,heart.failure=17,pneumonia=23),
num.index=c("best","worst"))
## Check that state and outcome are valid
if(!is.element(state,outcomename$state)){
stop("invalid state")
}
if(!is.element(outcome,outcomename$outcome)){
stop("invalid outcome")
}
### using index outcome and " death rate column" are unified
outcomename.Index <- which(outcomename$outcome.Index==outcome)
## Return hospital name in that state with the given rank
## 30-day death rate
h<- suppressWarnings(as.numeric(data[,outcomename$h.index[[outcomename.Index]]]))
# reverse sorting to get the worst hospital
h <- ifelse(rep(num==outcomename$num.index[2],length(h)),-h,h)
# when num is numeric
num <- ifelse(is.numeric(num),num,1)
if(num>=length(h))
{
NA
}
orderHospitalAll<-data[order(h,data[,2]),]
orderHospitalAll[orderHospitalAll$State==state,][,2][num]
source("rankhospital.R")
rankhospital("MD","heart attack","5000")
source("rankhospital.R")
rankhospital("MD","heart attack","5000")
source("rankhospital.R")
rankhospital("MD","heart attack","5000")
num
source("rankhospital.R")
h
source("rankhospital.R")
rankhospital("MD","heart attack","5000")
h
q
source("rankhospital.R")
rankhospital("MD","heart attack","5000")
h
length(h)
num <- ifelse(is.numeric(num),num,1)
num
if(as.integer(num)>=length(h)){
"NA"
}
if(is.numeric(num)>=length(h)){
NA
}
is.numeric(num)
as.numeric(num)
source("rankhospital.R")
rankhospital("MD","heart attack","5000")
num <- ifelse(is.numeric(num),as.integer(num))
num
source("rankhospital.R")
source("rankhospital.R")
rankhospital("MD","heart attack","5000")
if(is.numeric(num)==TRUE){
num<-as.integer(num)
if(num>=length(h)){
"NA"
}}
orderHospitalAll<-data[order(h,data[,2]),]
orderHospitalAll[orderHospitalAll$State==state,][,2][num]
source("rankhospital.R")
rankhospital("MD","heart attack","5000")
rankhospital("TX","heart attack","worst")
source("rankhospital.R")
rankhospital("TX","heart attack","worst")
source("rankhospital.R")
rankhospital("TX","heart attack","worst")
source("rankhospital.R")
rankhospital("TX","heart attack","worst")
source("rankhospital.R")
rankhospital("TX","heart attack","worst")
rankhospital("TX","heart attack","best")
rankhospital("TX","heart failure","4")
rankhospital("MD","heart attack","worst")
source("rankhospital.R")
rankhospital("MD","heart attack","worst")
rankhospital("TX","heart failure","4")
source("rankhospital.R")
source("rankhospital.R")
source("rankhospital.R")
source("rankhospital.R")
rankhospital("TX","heart failure","4")
rm(list=ls(all=TRUE))
source("rankhospital.R")
rankhospital("TX","heart failure","4")
source("rankhospital.R")
rankhospital("TX","heart failure","4")
source("rankhospital.R")
rankhospital("TX","heart failure","4")
rankhospital("TX","heart failure","4")
source("rankhospital.R")
rankhospital("TX","heart failure","4")
rankhospital("TX","heart failure","4")
source("rankhospital.R")
rankhospital("TX","heart failure","4")
source("rankhospital.R")
rankhospital("TX","heart failure","4")
source("rankhospital.R")
rankhospital("TX","heart failure","4")
source("rankhospital.R")
source("rankhospital.R")
source("rankhospital.R")
rankhospital("TX","heart failure","4")
rankhospital("TX","heart failure","worst")
source("rankhospital.R")
rankhospital("TX","heart failure","worst")
source("rankhospital.R")
rankhospital("TX","heart failure","worst")
source("rankhospital.R")
rankhospital("TX","heart failure","worst")
rankhospital("TX","heart failure"4)
rankhospital("TX","heart failure,4)
)
l';l';l''
q
c
rankhospital("TX","heart failure",4)
rankhospital("TX","heart failure",4)
rankhospital("MD","heart attack","worst")
source("rankhospital.R")
rankhospital("MD","heart attack","worst")
rankhospital("TX","heart failure",4)
rankhospital("MN","heart attack",5000)
source("rankhospital.R")
rankhospital("TX","heart failure",4)
rankhospital("MD","heart attack","worst")
rankhospital("MN","heart attack",5000)
source("rankhospital.R")
rankhospital("MD","heart attack","worst")
rankhospital("TX","heart failure",4)
rankhospital("MN","heart attack",5000)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
5
submit()
submit()
submit()
